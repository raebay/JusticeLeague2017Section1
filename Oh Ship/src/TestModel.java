import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

import Model.Item;

public class TestModel {

	//private String input;
	private String output;
	
	//Creating array list for room and item objects to be stored
	public static ArrayList<Room> rooms = new ArrayList<>();
	public static ArrayList<Item> items = new ArrayList<>(); 

	/**
	 * This part is to read in the room file and save each room object in an arrayList 
	 */
	
	File roomFile = new File("roomFile.txt");
	// open a Scanner to read data from File
	
	Scanner roomReader = null;  
	{
   try
	{
      roomReader = new Scanner(roomFile);
	
  } 
	catch (FileNotFoundException e)
  {
      System.out.println("File not found - terminating program");
      System.exit(0);
  	e.printStackTrace();
  }
  

   //Read room into array list
    while (roomReader.hasNext())
    {
    	// read room
    	String rID = roomReader.nextLine();
    	String rName = roomReader.nextLine();
    	String description = roomReader.nextLine();
    	String doors = roomReader.nextLine(); 
    	String items = roomReader.nextLine(); 
    	String monsters = roomReader.nextLine(); 
    	
    	// create new Room instance
    	Room temps = new Room(rID, rName, description, doors, items, monsters);
    	
    	//Adding Item objects to the Room 
    	Item rItems = TestModel.findItem(items);
    	temps.setrItems(rItems);

    	//adding Monster objects
    	Monster rMonsters = new Monster();
    	rMonsters.setName(monsters);
    	temps.setrMonsters(rMonsters);
    	
    	//adding whole temps object to rooms arrayList
    	rooms.add(temps);	    	
    	}

	}
	
	/**
	 * This part is to read in the items file and save each room object in an arrayList 
	 */
	
	File itemFile = new File("itemFile");
	// open a Scanner to read data from File
	
	Scanner itemReader = null;  
	{
   try
	{
      itemReader = new Scanner(itemFile);
	
  } 
	catch (FileNotFoundException e)
  {
      System.out.println("File not found - terminating program");
      System.exit(0);
  	e.printStackTrace();
  }
  

   //Read item into array list
    while (itemReader.hasNext())
    {
    	// read item
    	String iID = itemReader.nextLine();
    	String iName = itemReader.nextLine();
    	String iDescription = itemReader.nextLine();
    	
    	// create new Item instance
    	Item temp = new Item(iID, iName, iDescription); 
    	
    	//adding whole temp object to items arrayList
    	items.add(temp);	    	
    	}

	}
	
	//Current Room!// 
	Room currentRoom = new Room(); 
	
	public TestModel() {
		//input = "";
		output = "";
		System.out.println("Constructed");
		
	}
//	public void setInput(String input) {
//		//this.input = input;
//	}
	
	public void setOutput(String output) {
		this.output = output;
	}
	
	public String getOutput() {
		return output;
	}
	
	public String update(String input) 
	{
		if (output.isEmpty()) 
		{
			output = "PLAYER: " + input + "\r\nThis output was generated by the model.";
		}
		else
		{
			output = output + "\r\nPLAYER: " + input + "\r\nThis output was generated by the model.";
		}

		if(input.contains("Go to") || input.contains("go to"))
		{
			String roomID = input.substring(input.indexOf("o", 4) + 2, input.length()); 
			currentRoom = findRoom(roomID); 
			//output = output + "\r\n" + in;
			output = currentRoom.getrName() + "\r\n" + currentRoom.getrDescription();
		}
		
		else if(input.contains("Search") || input.contains("search"))
		{
			currentRoom.getrItems();
			
			if(currentRoom.getrItems().equals(null))
			{
				output = "Sorry, nothing here";
			}
			else
			output = "You look around the room, and you find some good shit!" + "\r\n" + currentRoom.getrItems();
		}
		
		
		return output;

	}
	
	//Method finds a room object based on its roomID 
	public static Room findRoom(String roomID)
	{
		for (Room obj: rooms)
		{
			if(obj.rID.equals(roomID))
			{
				return obj;
			}
		}
		return null;

	}
	
	//Method finds a item object based on its roomID 
	public static Item findItem(String itemID)
	{
		for (Item obj: items)
		{
			if(obj.iId.equals(itemID))
			{
				System.out.println(obj);
				return obj;
			}
		}
		return null;

	}
	
	
	
	
}
